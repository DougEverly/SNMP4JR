= SNMP4JR - SNMP Library for JRuby

== Summary

SNMP4JR is both a wrapper for SNMP4J and a library unto itself.  I've noticed that many of the JRuby libs seem to be simple wrappers, but interpreted languages usually have easier interfaces to things like SNMP(SNMP for PHP for instance, and the ruby SNMP libs).  To understand the differences between this library and the pure ruby SNMP libs please see the SNMP4J website or the feature list below:

=== Features:
* Wrappers written in Ruby with ease of use in mind.
* Very high performance
* Thread safe(only refers to SNMP4J calls, not wrappers until I finish testing them)
* Simple interface(SNMPMulti) for polling multiple devices with an OID list _or_ hand crafted PDU
* Full access to SNMP4J API functionality

=== SNMP4J API Features:
* SNMPv3 with MD5 and SHA authentication and DES and AES 128, AES 192, and AES 256 privacy.
* Pluggable Message Processing Models with implementations for MPv1, MPv2c, and MPv3
* All PDU types.
* Pluggable transport mappings. UDP and TCP are supported out-of-the-box.
* Pluggable timeout model.
* Synchronous and asynchronous requests.
* Command generator as well as command responder support.
* Free open source with the Apache license model
* Javaâ„¢ 1.4.1 or later
* Logging based on Log4J
* Row-based efficient asynchronous table retrieval with GETBULK.
* Multi-threading support.
* JUnit tests (will be available in version 2.x and later)

=== Notes:  

* Currently only supports the API, but agent support could be added.  If you would like to implement an agent in JRuby please let me know and I'll try to add it.  Please specify if you would like to implement an agent or AgentX as these are two different things.
* If you would like commercial support for SNMP4J.  Please see this page Support:http://www.snmp4j.org/html/support.html  PLEASE NOTE that this is NOT a support mechanism for this gem, but for the library it wraps.  For gem support see the github repository at: http://github.com/awksedgreep/SNMP4JR
* SNMP4J is included with this gem and is released with an Apache 2.0 license which can be found here: http://www.snmp4j.org/LICENSE-2_0.txt
* SNMP4JR has a BSD license.  You can fork, abuse, use as you wish.  The BSD software license is listed below:
    
    Copyright (c) 2010, Mark Cotner
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    
        * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        * Neither the name of the OVE.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    
Usage:
Wrappers are provided for all API calls for SNMP4J.  Use them as you would use the Java libs directly.  Please refer to SNMP4J documentation for further direction.

SNMPMulti Utility class usage:
    
    poller = SNMPMulti.new([{:name => 'server1', :host => 'server1.myhost.com', :community => 'public'}, 
    			{:name => 'server2', :host => 'server2.myhost.com', :community => 'public'}])
    poller.oids = ['1.3.6.1.2.1.1.1', '1.3.6.1.2.1.1.3']
    poller.poll
    poller.results.each do |result|
      # ['response'] is the response PDU, ['request'] is the request PDU, ['target'] stores target info for this request
      result['response'].variable_bindings.each do |vb| 
        puts vb.oid.to_s + " => " + vb.variable.to_s
      end
    end
    








